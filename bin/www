#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../exp');
let debug = require('debug')('common:server');
let http = require('http');
let { readFile } = require('fs')

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '8081');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function getNameStyling (idx) {
  return new Promise((resolve, reject) => {
    readFile('./config/banner.txt', function (err, data) {
      if (err) return reject(err)
      data = data.toString().split(',')
      let index = idx || (process.stdout.columns >= 78 && process.stdout.rows >= 3 ? 2 : 4)
      debug('Console size: ' + process.stdout.columns + 'x' + process.stdout.rows)
      return resolve(data[index])
    })
  });
}
/**
 * Event listener for HTTP server "listening" event.
 */

async function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  try {
    debug(await getNameStyling())
  } catch (e) {
    debug('Could not load banner because' + e.message)
  }

  debug('Listening on ' + bind);
}
